#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs-extra');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var J = require('JSUS').JSUS;
var ngt = require('nodegame-game-template');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

var root = path.resolve(__dirname, '..');
var templatesDir = root + '/templates/';
var confFile = root + '/conf/generator.conf.json';

// Re-assign process.exit because of commander
process.exit = exit

// Mock configuration. Should be overwritten.
var conf = {
    author: 'author',
    email: 'email',
    gamesFolder: undefined
};

var templates = [ 'dictator' ];

// Flag if a command is passed at all.
var cmdValue;

// CLI

before(program, 'outputHelp', function () {
    this.allowUnknownOption();
});


// Not ready yet.
// program
//     .command('list-templates')
//     .description('List all available game templates')
//     .action(function() {
//         var i, len;
//         i = -1, len = templates.length;
//         for ( ; ++i < len ; ) {
//             console.log(templates[i]);
//         }
//         console.log();
//     });


program
    .version(version)
    .command('update-conf')
    .description('Updates stored configuration (author, games dir, etc.)')
    .action(function(env, options){
        createConfFile(options);
    });


program
    .version(version)
    .command('show-conf')
    .description('Shows current configuration')
    .action(function(env, options){
        loadConfFile(function() {
            showConf();
        });
    });

program
    .command('create-game [game_name] [author] [author_email]')
    .description('Creates a new game in the games directory')
    .option('    --git', 'add .gitignore')
    // Not yet ready.
    // .option('-t, --template <template>', 'set the template for game')
    .option('-f, --force', 'force on non-empty directory')
    .option('-v, --verbose', 'verbose output')
    .action(function(gameName, author, email, options) {

        loadConfFile(function() {
            createGame({
                game: gameName,
                author: author,
                email: email,
                options: options
            });
        });

    });

/**
 * Install a before function; AOP.
 */
function before(obj, method, fn) {
    var old = obj[method];

    obj[method] = function () {
        fn.call(this);
        old.apply(this, arguments);
    };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */
function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

/**
 * Create application at the given directory `path`.
 *
 * @TODO: update params
 * @param {string} outDir
 */
function createGameDir(template, gameName, outDir,
                       author, authorEmail, options) {

    // Number of synchronous / asynchronous operations.
    var wait = 9;
    var verbose = !!options.verbose;
    var doGit = !!options.git;
    var d = new Date();
    var year = d.getFullYear();
    var fullCopyright;
    var nodegameCopyright;
    var fileName;

    nodegameCopyright = 'Copyright(c) 2017 Stefano Balietti <ste@nodegame.org>';

    // Make full copyright string.
    fullCopyright = 'Copyright(c) ' + year;
    if (author) fullCopyright += ' ' + author;
    if (authorEmail) fullCopyright += ' <' + authorEmail + '>';

    // Fix trailing slash.
    if (outDir.charAt(outDir.length) !== '/') outDir = outDir += '/';   

    console.log();

    function substituteHeader(str) {
        // Backward compatible.
        str = str.replace('{AUTHOR}', author);
        str = str.replace('{AUTHOR_EMAIL}', authorEmail);
        str = str.replace('{YEAR}', year);
        // For all games.
        str = str.replace(nodegameCopyright, fullCopyright);
        return str;
    }


    function write(filePath, str, mode) {
        fs.writeFileSync(filePath, str, { mode: mode || 0666 });
        if (verbose) console.log('   \x1b[36mcreate\x1b[0m : ' + filePath);
    }

    function mkdir(dir, fn) {
        mkdirp(dir, 0755, function(err){
            if (err) throw err;
            if (verbose) console.log('   \033[36mcreate\033[0m : ' + dir);
            fn && fn();
        });
    }

    function complete() {
        var prompt, tmp;
        if (--wait) return;
        prompt = launchedFromCmd() ? '>' : '$';
        if (verbose) console.log();

        console.log('   \x1b[36mgame created\x1b[0m:');
        console.log('        ' + outDir);
        console.log();

        console.log('   \x1b[36medit and rename\x1b[0m:');
        tmp = '        channel/channel.credentials.js.sample -> ' +
            'channel/channel.credentials.js';
        console.log(tmp);
        tmp = '        channel/channel.secret.js.sample -> ' +
            'channel/channel.secret.js';
        console.log(tmp);
        console.log();

        console.log();

//        console.log('   run the app:');
//
//        if (launchedFromCmd()) {
//          console.log('     %s SET DEBUG=%s:* & npm start', prompt, gameName);
//        } else {
//            console.log('     %s DEBUG=%s:* npm start', prompt, gameName);
//        }
//
//        console.log();
    }


    // Loading Templates.

    // AUTH.
    var auth = loadTemplate(template, 'auth/auth.js');
    var authSettings = loadTemplate(template, 'auth/auth.settings.js');
    var authCodes = loadTemplate(template, 'auth/auth.codes.js');

    // CHANNEL.
    var channelSettings = loadTemplate(template, 'channel/channel.settings.js');
    var channelSecret = loadTemplate(template, 'channel/channel.secret.js');
    var channelCredentials = loadTemplate(template,
                                          'channel/channel.credentials.js');

    // GAME.
    var gameStages = loadTemplate(template, 'game/game.stages.js');
    var gameSetup = loadTemplate(template, 'game/game.setup.js');
    var gameSettings = loadTemplate(template, 'game/game.settings.js');

    // GAME / client_types.
    var typePlayer = loadTemplate(template, 'game/client_types/player.js');
    var typeBot = loadTemplate(template, 'game/client_types/bot.js');
    var typeLogic = loadTemplate(template, 'game/client_types/logic.js');
    var typePhantom = loadTemplate(template, 'game/client_types/phantom.js');
    var typeAutoplay = loadTemplate(template, 'game/client_types/autoplay.js');

    // PUBLIC.
    var indexPage = loadTemplate(template, 'public/index.htm');
    var gamePage = loadTemplate(template, 'public/game.htm');
    var instrPage = loadTemplate(template, 'public/instructions.htm');
    var endPage = loadTemplate(template, 'public/end.htm');
    var indexJS = loadTemplate(template, 'public/js/index.js');

    // VIEWS.


    // WAITROOM.
    var waitroomSettings = loadTemplate(template,
                                        'waitroom/waitroom.settings.js');
    var waitroom = loadTemplate(template, 'waitroom/waitroom.js');

    // REQUIREMENTS.
    fileName = 'requirements/requirements.settings.js';
    var requirementsSettings = loadTemplate(template, fileName);
    fileName = 'requirements/requirements.room.js';
    var requirementsRoom = loadTemplate(template, fileName);
    var requirements = loadTemplate(template, 'requirements/requirements.js');

    // LEVELS.
    var levelsREADME = loadTemplate(template, 'levels/README.md');

    mkdir(outDir, function() {

        mkdir(outDir + 'data');

        // AUTH.
        mkdir(outDir + 'auth', function() {
            auth = substituteHeader(auth);
            authSettings = substituteHeader(authSettings);

            auth = auth.replace('{NAME}', gameName);

            write(outDir + 'auth/auth.js', auth);
            write(outDir + 'auth/auth.settings.js', authSettings);
            write(outDir + 'auth/auth.codes.js.sample', authCodes);
            complete();
        });

        // CHANNEL.
        mkdir(outDir + 'channel', function() {

            // Settings.
            channelSettings = substituteHeader(channelSettings);
            channelSettings = channelSettings.replace(/{NAME}/g, gameName);
            channelSettings = channelSettings.replace('{ADMIN}',
                                                      gameName + '/admin');
            write(outDir + 'channel/channel.settings.js', channelSettings);

            // Credentials.
            channelCredentials = substituteHeader(channelCredentials);
            write(outDir + 'channel/channel.credentials.js.sample',
                  channelCredentials);

            // Secret.
            channelSecret = substituteHeader(channelSecret);
            write(outDir + 'channel/channel.secret.js.sample', channelSecret);

            complete();
        });

        // GAME.
        mkdir(outDir + 'game', function() {

            gameStages = substituteHeader(gameStages);
            gameSetup = substituteHeader(gameSetup);
            gameSettings = substituteHeader(gameSettings);

            write(outDir + 'game/game.stages.js', gameStages);
            write(outDir + 'game/game.setup.js', gameSetup);
            write(outDir + 'game/game.settings.js', gameSettings);

            mkdir(outDir + 'game/client_types', function() {
                typePlayer = substituteHeader(typePlayer);
                typeBot = substituteHeader(typeBot);
                typeAutoplay = substituteHeader(typeAutoplay);
                typeLogic = substituteHeader(typeLogic);
                typePhantom = substituteHeader(typePhantom);

                write(outDir + 'game/client_types/autoplay.js', typeAutoplay);
                write(outDir + 'game/client_types/player.js', typePlayer);
                write(outDir + 'game/client_types/bot.js', typeBot);
                write(outDir + 'game/client_types/logic.js', typeLogic);
                write(outDir + 'game/client_types/phantom.js', typePhantom);
                complete();
            });
        });

        // PUBLIC.
        mkdir(outDir + 'public', function() {
            write(outDir + 'public/index.htm', indexPage);
            indexJS = substituteHeader(indexJS);
            // TODO: one command to replace all instances.
            indexJS = indexJS.replace('{NAME}', gameName);
            indexJS = indexJS.replace('{NAME}', gameName);

            instrPage = instrPage.replace('{NAME}', gameName);
            write(outDir + 'public/instructions.htm', instrPage);

            write(outDir + 'public/game.htm', gamePage);
            write(outDir + 'public/end.htm', endPage);

            // Copying favicon over.
            fs.copySync(ngt.resolve('public/favicon.ico'),
                        outDir + 'public/favicon.ico');

            mkdir(outDir + 'public/js', function() {
                write(outDir + 'public/js/index.js', indexJS);

                mkdir(outDir + 'public/css', function() {
                    complete();
                });
            });
        });

        // VIEWS.
        mkdir(outDir + 'views', function() {
            mkdir(outDir + 'views/contexts', function() {
                // Something.
                mkdir(outDir + 'views/templates', function() {
                    // Something.
                    complete();
                });
            });
        });

        // WAITROOM.
        mkdir(outDir + 'waitroom', function() {

            waitroom = substituteHeader(waitroom);
            waitroomSettings = substituteHeader(waitroomSettings);

            write(outDir + 'waitroom/waitroom.js.sample', waitroom);
            write(outDir + 'waitroom/waitroom.settings.js', waitroomSettings);

            complete();
        });

        // REQUIREMENTS.
        mkdir(outDir + 'requirements', function() {

            requirements = substituteHeader(requirements);
            requirementsSettings = substituteHeader(requirementsSettings);
            requirementsRoom = substituteHeader(requirementsRoom);

            write(outDir + 'requirements/requirements.js.sample', requirements);
            write(outDir + 'requirements/requirements.settings.js',
                  requirementsSettings);
            write(outDir + 'requirements/requirements.room.js.sample',
                  requirementsRoom);

            complete();
        });

        // LEVELS.
        mkdir(outDir + 'levels', function() {
            write(outDir + 'levels/README.md', levelsREADME);
            complete();
        });

        // Package.json
         var pkg = {
             name: gameName
             , version: '0.0.1'
             , description: 'This is a nodeGame game'
             , author: author + ' ' + '<' + authorEmail + '>'
             , license: "MIT/X11"
             , homepage: 'http://nodegame.org'
//             , private: true
         }


        // sort dependencies like npm(1)
        // pkg.dependencies = sortedObject(pkg.dependencies);

        // write files
        write(outDir + 'package.json', JSON.stringify(pkg, null, 4));

        if (doGit) {
            write(outDir + '.gitignore',
                  fs.readFileSync(root + '/.gitignore', 'utf-8'));
        }

        complete();
    });
}

/**
 * Copies a file to a destination
 *
 *
 *
 */
function copyTemplate(from, to) {
    from = path.join(__dirname, '..', 'templates', from);
    write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} dir
 * @param {Function} fn
 */
function emptyDirectory(dir, fn) {
    fs.readdir(dir, function(err, files){
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

/**
 * Graceful exit for async STDIO
 */
function exit(code) {
    // flush output for Node.js Windows pipe bug
    // https://github.com/joyent/node/issues/6247 is just one bug example
    // https://github.com/visionmedia/mocha/issues/333 has a good discussion
    function done() {
        if (!(draining--)) _exit(code);
    }

    var draining = 0;
    var streams = [process.stdout, process.stderr];

    exit.exited = true;

    streams.forEach(function(stream){
        // submit empty write request and wait for completion
        draining += 1;
        stream.write('', done);
    });

    done();
}

/**
 * Determine if launched from cmd.exe
 */
function launchedFromCmd() {
    return process.platform === 'win32'
        && process.env._ === undefined;
}

function isAbsolute(filePath) {
    if (launchedFromCmd(filePath)) return filePath.substring(1,3) === ':\\';
    else return filePath.charAt(0) === '/';
}

/**
 * Load template file.
 */
function loadTemplate(template, file) {
    var templatePath;
    templatePath = ngt.resolve(file);
    return fs.readFileSync(templatePath, 'utf-8');
    // It was:
    //return fs.readFileSync(
    //    path.join(__dirname, '..', 'games', template, file), 'utf-8');
}

function templateExists(template) {
    var i, len;
    i = -1, len = templates.length;
    for ( ; ++i < len ; ) {
        if (templates[i] === template) return true;
    }
    return false;
}

/**
 * Create game.
 *
 * By default, uses the dictator-game template.
 */
function createGame(options) {
    var author, authorEmail, destinationPath;
    var template, appName, str, opts;

    if (!options.game) {
        console.log('Error: game name missing');
        return;
    }

    if (options.template && !templateExists(options.template)) {
        console.log('Error: template not found: ' + options.template);
        return;
    }
    else {
        template = 'dictator';
    }

    if (isAbsolute(options.game)) {
        destinationPath = options.game;
    }
    else {
        // Is there a default game folder?
        if (!conf.gamesFolder) {
            console.log('Error: no default game folder found. Please ' +
                        'provide an absolute path for the game, or ' +
                        'set the default game folder');
            return;
        }
        destinationPath = conf.gamesFolder + options.game;
    }

    // App name.
    appName = path.basename(path.resolve(destinationPath));

    // Author and email as from input or as default ones.
    author = options.author || conf.author;
    authorEmail = options.email || conf.email;

    // These are the options like -f.
    opts = options.options || {};

    // Generate game. Check if it is empty.
    emptyDirectory(destinationPath, function(empty) {

        if (empty || opts.force) {
            if (!empty) {
                console.log('  --force option: overwriting existing folder.');
            }
            createGameDir(template,
                          appName,
                          destinationPath,
                          author,
                          authorEmail,
                          opts);
        }
        else {
            colorWrite('Warning!');
            console.log('');
            str = destinationPath + ' is not empty, do '
                + 'you want to continue? [y/N] ';
            confirm(str, function(ok) {
                if (ok) {
                    process.stdin.destroy();
                    createGameDir(template,
                                  appName,
                                  destinationPath,
                                  author,
                                  authorEmail,
                                  opts);
                }
                else {
                    console.error('aborting');
                    exit(1);
                }
            });
        }
    });
}


/**
 * Create conf file
 */
function createConfFile(cb) {

    var rl, str;

    rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    console.log('');
    str = 'Path to nodeGame games folder: ';
    if (conf.gamesFolder) str += '[' + conf.gamesFolder + '] ';

    rl.question(str, function(answer) {

        if (!answer) answer = conf.gamesFolder;

        if (!fs.existsSync(answer)) {
            console.log('Error: directory not existing: ' + answer);
            process.exit();
            // Must return, otherwise jumps to the next question already.
            return;
        }

        // Add trailing slashes.
        if (launchedFromCmd()) {
            if (answer.substring(answer.length-2)!== '\\') answer += '\\';
        }
        else {
            if (answer.charAt(answer.length-1) !== '/') answer += '/';
        }

        conf.gamesFolder = answer;

        str = 'Default author name: ';
        if (conf.author) str += '[' + conf.author +'] ';

        rl.question(str, function(answer) {

            if (answer) conf.author = answer;

            str = 'Default author email: ';
            if (conf.email) str += '[' + conf.email +'] ';
            rl.question(str, function(answer) {

                if (answer) conf.email = answer;

                showConf(conf);

                rl.close();

                writeConfFile(conf, cb);
            });
        });
    });
}

function showConf(localConf) {
    localConf = localConf || conf;
    console.log('');
    colorWrite('Configuration: ');
    console.log('');
    console.log("    Games folder path: ", conf.gamesFolder);
    console.log("          Author name: ", conf.author);
    console.log("         Author email: ", conf.email);
    console.log('');
    console.log('To change run nodegame update-conf');
    console.log('');
}

function writeConfFile(conf, cb) {
    var str;
    str = JSON.stringify(conf, null, 4);
    fs.writeFile(confFile, str, function(err) {
        if (err) {
            console.log('');
            colorWrite('Error!');
            console.log('Could not write ' + confFile);
            console.log(err);
            console.log('');
            console.log('Trying to continue...');
            console.log('');
        }

        if (cb) cb();
    });
}

function loadConfFile(cb) {
    // Try to load configuration. If not found start utility to create it.
    try {
        conf = require(confFile);
        if (!conf.author || !conf.email || !conf.gamesFolder) {
            createConfFile(cb);
        }
        else {
            cb();
        }
    }
    catch(e) {
        console.log('');
        colorWrite('Warning!');
        console.log('');
        console.log('nodegame-generator conf file ' +
                    'not found or not readable');
        console.log('');
        createConfFile(cb);
    }
}

function colorWrite(str) {
    console.log('\x1b[36m' + str + '\x1b[0m');
}

// Parsing options.
program.parse(process.argv);

if (!program.args.length &&
    program.rawArgs[2] !== '--help' && program.rawArgs[2] !== '-h') {
    console.log('Error: no command provided.');
}
